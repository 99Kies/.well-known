{"version":3,"sources":["fixtures/resolver.js","App.js","serviceWorker.js","index.js"],"names":["fetch","require","getJson","url","a","headers","Accept","method","then","data","json","module","exports","resolve","didUri","indexOf","res","didDocument","Error","jsonld","jsigs","ES256K","Ed25519Signature2018","suites","resolver","documentLoader","startsWith","contextUrl","document","documentUrl","console","error","well_known_did_configuration_uri","window","location","origin","getPublicKey","kid","key","assertionMethod","forEach","k","publicKey","k1","id","App","React","useState","state","setState","getLinkedDIDs","linked_dids","did_configuration_resource","log","i","entries","length","entry","JWS","decode","complete","header","payload","signature","publicKeyJwk","crv","JWT","verify","verified","vc","credentialSubject","domain","URL","host","push","suite","proof","type","warn","verifyCredential","credential","verification_result","domain_matches_resource_uri","useEffect","style","padding","JSON","stringify","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.561f85f0.chunk.js","sourcesContent":["const fetch = require(\"node-fetch\");\n\nconst getJson = async (url) =>\n  fetch(url, {\n    headers: {\n      Accept: \"application/ld+json\",\n    },\n    method: \"get\",\n  }).then((data) => data.json());\n\nmodule.exports = {\n  resolve: async (didUri) => {\n    if (didUri.indexOf(\"did:web:identity.foundation\") === 0) {\n      return require(\"./unlockedDID.json\");\n    }\n    const res = await getJson(\n      \"https://uniresolver.io/1.0/identifiers/\" + didUri\n    );\n\n    if (res.didDocument === null) {\n      throw new Error(\"Could not resolve DID with Universal Resolver.\");\n    }\n    return res.didDocument;\n  },\n};\n","import React from \"react\";\nimport vc from \"vc-js\";\n\nconst jsonld = require(\"jsonld\");\nconst jsigs = require(\"jsonld-signatures\");\nconst ES256K = require(\"@transmute/es256k-jws-ts\");\n\nconst { Ed25519Signature2018 } = jsigs.suites;\n\nconst resolver = require(\"./fixtures/resolver\");\n\nconst getJson = async (url) =>\n  fetch(url, {\n    headers: {\n      Accept: \"application/ld+json\",\n    },\n    method: \"get\",\n  }).then((data) => data.json());\n\nconst suites = {\n  Ed25519Signature2018: new Ed25519Signature2018(),\n};\n\nconst documentLoader = async (url) => {\n  if (url.startsWith(\"did:\")) {\n    const didDocument = await resolver.resolve(url);\n    return {\n      contextUrl: null, // this is for a context via a link header\n      document: didDocument, // this is the actual document that was loaded\n      documentUrl: url, // this is the actual context URL after redirects\n    };\n  }\n  try {\n    const res = await jsonld.documentLoader(url);\n    // console.log(url, res);\n    return res;\n  } catch (e) {\n    console.error(`No remote context support for ${url}`);\n  }\n};\n\nconst well_known_did_configuration_uri =\n  window.location.origin + \"/.well-known/did-configuration.json\";\n\nconst getPublicKey = (didDocument, kid) => {\n  let key;\n  didDocument.assertionMethod.forEach((k) => {\n    if (typeof k === \"string\") {\n      // console.log(k === kid);\n      if (k === kid) {\n        if (didDocument.publicKey) {\n          didDocument.publicKey.forEach((k1) => {\n            // console.log(k1);\n            if (k1.id === kid) {\n              key = k1;\n            }\n          });\n        }\n      }\n    }\n    if (k.id === kid) {\n      key = k;\n    }\n  });\n  return key;\n};\n\nfunction App() {\n  const [state, setState] = React.useState({\n    well_known_did_configuration_uri,\n  });\n\n  const getLinkedDIDs = async (well_known_did_configuration_uri) => {\n    const linked_dids = [];\n    const did_configuration_resource = await getJson(\n      state.well_known_did_configuration_uri\n    );\n    console.log({ did_configuration_resource });\n    for (let i = 0; i < did_configuration_resource.entries.length; i++) {\n      console.log(\"processing entry \", i);\n      let entry = did_configuration_resource.entries[i];\n      console.log({ entry });\n      if (typeof entry === \"string\") {\n        const { header, payload, signature } = await ES256K.JWS.decode(entry, {\n          complete: true,\n        });\n        console.log({ header, payload, signature });\n        const { document } = await documentLoader(header.kid);\n        console.log(document);\n        const key = getPublicKey(document, header.kid);\n        console.log({ key });\n        if (key && key.publicKeyJwk.crv === \"secp256k1\") {\n          const verified = await ES256K.JWT.verify(entry, key.publicKeyJwk);\n\n          const domain_matches_resource_uri =\n            verified.vc.credentialSubject.domain ===\n            new URL(well_known_did_configuration_uri).host;\n\n          if (domain_matches_resource_uri) {\n            linked_dids.push(verified.vc.credentialSubject.id);\n          }\n        }\n      }\n      if (typeof entry === \"object\") {\n        const suite = suites[entry.proof.type];\n        if (!suite) {\n          console.warn(\"no suite for \", entry.proof.type);\n          continue;\n        }\n        const verification_result = await vc.verifyCredential({\n          credential: entry,\n          suite,\n          documentLoader,\n        });\n        if (!verification_result.verified) {\n          continue;\n        }\n        console.log({ verification_result });\n        const domain_matches_resource_uri =\n          entry.credentialSubject.domain ===\n          new URL(well_known_did_configuration_uri).host;\n        console.log({ domain_matches_resource_uri });\n        if (domain_matches_resource_uri) {\n          linked_dids.push(entry.credentialSubject.id);\n        }\n      }\n    }\n\n    return [];\n  };\n\n  React.useEffect(() => {\n    (async () => {\n      const linked_dids = await getLinkedDIDs(\n        state.well_known_did_configuration_uri\n      );\n      setState({\n        ...state,\n        linked_dids,\n      });\n    })();\n  }, []);\n  return (\n    <div style={{ padding: \"16px\" }}>\n      <pre>{JSON.stringify(state, null, 2)}</pre>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}