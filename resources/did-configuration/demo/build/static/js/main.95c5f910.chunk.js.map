{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getJson","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","wrap","_context","prev","next","abrupt","fetch","method","headers","Accept","then","data","json","stop","_x","apply","this","arguments","getPublicKeyFromJwt","_ref2","_callee2","jwt","decodedClaim","res","publicKeyFromResolver","_context2","ES256K","decode","complete","sent","payload","iss","methodMetadata","continuation","publicKey","find","k","id","header","kid","_x2","App","state","getAuthorizedDids","_callee4","didConfigUri","config","_context4","URL","Promise","all","keys","entries","map","_ref4","_callee3","did","verified","_context3","verify","publicKeyJwk","console","log","domain","_this2","setState","defineProperty","origin","hostname","is_claim_for_origin","undefined","_x4","window","location","react_default","createElement","JSON","stringify","React","Component","Boolean","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.95c5f910.chunk.js","sourcesContent":["import React from \"react\";\nimport * as ES256K from \"@transmute/es256k-jws-ts\";\n\nconst getJson = async url =>\n  fetch(url, {\n    method: \"get\",\n    headers: {\n      Accept: \"application/ld+json\"\n    }\n  }).then(data => data.json());\n\nconst getPublicKeyFromJwt = async jwt => {\n  const decodedClaim = await ES256K.JWT.decode(jwt, {\n    complete: true\n  });\n  const res = await getJson(\n    \"https://uniresolver.io/1.0/identifiers/\" + decodedClaim.payload.iss\n  );\n  const publicKeyFromResolver = res.methodMetadata.continuation.publicKey.find(\n    k => {\n      return (\n        k.id === decodedClaim.payload.iss + \"#key-\" + decodedClaim.header.kid\n      );\n    }\n  );\n  return publicKeyFromResolver;\n};\n\nclass App extends React.Component {\n  state = {};\n\n  async componentWillMount() {\n    const getAuthorizedDids = async didConfigUri => {\n      const url = new URL(didConfigUri);\n      const config = await getJson(didConfigUri);\n      return Promise.all(\n        Object.keys(config.entries).map(async did => {\n          const jwt = config.entries[did].jwt;\n          const publicKey = await getPublicKeyFromJwt(jwt);\n          const verified = await ES256K.JWT.verify(jwt, publicKey.publicKeyJwk);\n          if (verified.iss === did) {\n            console.log(did, \" is authorized for: \", verified.domain);\n            this.setState({\n              [did]: {\n                verified,\n                origin: url.hostname,\n                is_claim_for_origin: url.hostname === verified.domain\n              }\n            });\n            return did;\n          }\n          return undefined;\n        })\n      );\n    };\n    await getAuthorizedDids(\n      window.location.origin + \"/.well-known/did-configuration.json\"\n    );\n  }\n  render() {\n    return (\n      <div>\n        <h1>.well-known/did-configuration</h1>\n        <pre>{JSON.stringify(this.state, null, 2)}</pre>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}